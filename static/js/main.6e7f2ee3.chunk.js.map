{"version":3,"sources":["js/Login.js","js/Lobby.js","js/Prepare.js","js/Whiteboard.js","route.js","serviceWorker.js","index.js"],"names":["Login","props","state","console","log","className","Form","Group","controlId","Label","Control","placeholder","type","Button","variant","href","Component","Prepare","x2press","e","preventDefault","x3press","this","disabled","onClick","Whiteboard","route","basename","process","exact","path","component","Lobby","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6e7f2ee3.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport { Form, Button } from \"react-bootstrap\";\nimport \"../style/App.css\";\n\nexport default class Login extends Component {\n  \n  constructor(props) {\n    super(props);\n    this.state = {\n      \n    }\n  }\n\n  initialize() {\n    console.log(\"Entering Initialize state.\")\n  }\n  \n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <a>Welcome ICEM 2020</a>\n          <a>Please login to access your function.</a>\n          <br></br>\n          <Form>\n            <Form.Group controlId=\"formBasicEmail\">\n              <Form.Label className=\"App-text\">Username</Form.Label>\n              <Form.Control placeholder=\"Enter username\" />\n            </Form.Group>\n            <Form.Group controlId=\"formBasicPassword\">\n              <Form.Label className=\"App-text\">Password</Form.Label>\n              <Form.Control type=\"password\" placeholder=\"Enter password\" />\n            </Form.Group>\n            <Button variant=\"primary\" type=\"submit\" href=\"/Lobby\">\n              Login\n            </Button>\n          </Form>\n        </header>\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport { Button } from \"react-bootstrap\";\nimport \"../style/App.css\";\nimport axios from \"axios\";\n\nexport default class Login extends Component {\n  \n  constructor(props) {\n    super(props);\n    this.state = {}\n  }\n\n  initialize() {\n    console.log(\"Entering Initialize state.\")\n  }\n  \n  render() {\n    return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <a> <b>Lobby</b> </a>\n        <br></br>\n        <a className=\"App-text\">Waiting for other player to connect...</a>\n        <br></br>\n        <div>\n          <Button variant=\"outline-success\" type=\"submit\" href=\"/Prepare\">\n            Prepare\n          </Button>\n        </div>\n        <div>\n          <Button variant=\"danger\" type=\"submit\" href=\"/\">\n            Logout\n          </Button>\n        </div>\n      </header>\n    </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport { Button } from \"react-bootstrap\";\nimport \"../style/App.css\";\n\nexport default class Prepare extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      x2press: false,\n      x3press: false\n    };\n  }\n\n  x2press = e => {\n    e.preventDefault();\n    console.log(\"X2 Pressed!\")\n  }\n\n  x3press = e => {\n    e.preventDefault();\n    console.log(\"X3 Pressed!\")\n  }\n\n  render() {\n    const { x2press, x3press} = this.state;\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <a>\n            <b>Prepare</b>\n          </a>\n\n          <br></br>\n            <a className=\"App-text\">Level: 10</a>\n            <a className=\"App-text\">Time: 10:00</a>\n            <a className=\"App-text\">System: ...</a>\n          <br></br>\n\n          <div>\n            <button\n              className=\"btn btn-secondary\"\n              disabled={x2press}\n              onClick={this.x2press}>\n              X2\n            </button>\n            <a> </a>\n            <button\n              className=\"btn btn-secondary\"\n              disabled={x3press}\n              onClick={this.x3press}>\n              X3\n            </button>\n          </div>\n\n          <br></br>\n          <div>\n            <Button variant=\"outline-success\" type=\"submit\" href=\"/Whiteboard\">\n              Ready\n            </Button>\n          </div>\n          <div>\n            <Button variant=\"danger\" type=\"submit\" href=\"/\">\n              Logout\n            </Button>\n          </div>\n        </header>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport { Button } from \"react-bootstrap\";\nimport \"../style/App.css\";\n\nexport default function Whiteboard() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <a>\n          <b>Whiteboard</b>\n        </a>\n        <br></br>\n        <a className=\"App-text\">Score: 1</a>\n        <a className=\"App-text\">Time: 09:34</a>\n        <a className=\"App-text\">Items: X2</a>\n        <br></br>\n        <div>\n          <Button variant=\"outline-success\" type=\"submit\" href=\"/\">\n            Submit\n          </Button>\n        </div>\n        <div>\n          <Button variant=\"danger\" type=\"submit\" href=\"/\">\n            Logout\n          </Button>\n        </div>\n      </header>\n    </div>\n  );\n}\n","import React, { Component } from \"react\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport Login from \"./js/Login\";\nimport Lobby from \"./js/Lobby\";\nimport Prepare from \"./js/Prepare\";\nimport Whiteboard from \"./js/Whiteboard\";\n\nexport default class route extends Component {\n    render() {\n        return (\n            <Router basename={process.env.PUBLIC_URL}>\n                <Switch>\n                    <Route exact path=\"/\" component={Login}/>\n                    <Route path=\"/Lobby\" component={Lobby}/>\n                    <Route path=\"/Prepare\" component={Prepare}/>\n                    <Route path=\"/Whiteboard\" component={Whiteboard}/>\n                </Switch>\n            </Router>\n        );\n    }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Route from './route.js';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Route/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}